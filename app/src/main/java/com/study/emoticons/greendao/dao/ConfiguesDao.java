package com.study.emoticons.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.study.emoticons.model.Configues;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONFIGUES".
*/
public class ConfiguesDao extends AbstractDao<Configues, Long> {

    public static final String TABLENAME = "CONFIGUES";

    /**
     * Properties of entity Configues.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Openid = new Property(1, String.class, "openid", false, "OPENID");
        public final static Property Status_online = new Property(2, boolean.class, "status_online", false, "STATUS_ONLINE");
        public final static Property Head_img_url = new Property(3, String.class, "head_img_url", false, "HEAD_IMG_URL");
        public final static Property User_name = new Property(4, String.class, "user_name", false, "USER_NAME");
    }


    public ConfiguesDao(DaoConfig config) {
        super(config);
    }
    
    public ConfiguesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONFIGUES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OPENID\" TEXT," + // 1: openid
                "\"STATUS_ONLINE\" INTEGER NOT NULL ," + // 2: status_online
                "\"HEAD_IMG_URL\" TEXT," + // 3: head_img_url
                "\"USER_NAME\" TEXT);"); // 4: user_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONFIGUES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Configues entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(2, openid);
        }
        stmt.bindLong(3, entity.getStatus_online() ? 1L: 0L);
 
        String head_img_url = entity.getHead_img_url();
        if (head_img_url != null) {
            stmt.bindString(4, head_img_url);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(5, user_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Configues entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(2, openid);
        }
        stmt.bindLong(3, entity.getStatus_online() ? 1L: 0L);
 
        String head_img_url = entity.getHead_img_url();
        if (head_img_url != null) {
            stmt.bindString(4, head_img_url);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(5, user_name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Configues readEntity(Cursor cursor, int offset) {
        Configues entity = new Configues( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // openid
            cursor.getShort(offset + 2) != 0, // status_online
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // head_img_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // user_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Configues entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOpenid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStatus_online(cursor.getShort(offset + 2) != 0);
        entity.setHead_img_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Configues entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Configues entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Configues entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
